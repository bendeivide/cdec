{
  "articles": [
    {
      "path": "about.html",
      "title": "Sobre o projeto",
      "description": "Descrição básica sobre o CDEC\n",
      "author": [],
      "contents": "\r\n\r\nContents\r\nIntegrantes\r\nApoio\r\n\r\nIntegrantes\r\nBen Dêivide (DEFIM/UFSJ)\r\nMarcelo Carlos Ribeiro/UFOP\r\nMatheus Fernando (Eng. Mec/UFSJ)\r\nApoio\r\nUniversidade Federal de São João del-Rei\r\n\r\n\r\n\r\n",
      "last_modified": "2021-05-03T20:30:27-03:00"
    },
    {
      "path": "apoio.html",
      "title": "Material de apoio ao CDEC",
      "author": [],
      "contents": "\r\n\r\nContents\r\nEmentas para referência\r\nMateriais interessantes\r\nEstudando RMarkdown e Markdown\r\nComo usar o GitHub\r\nLinguagens de programação\r\nAmbiente R\r\nFamília de pacotes a serem estudados\r\nEstudando o R\r\n\r\nLinguagem Python\r\nIntrodução ao Python\r\nPrimeiros comandos no Python\r\nMódulos Python para Data Science\r\nIntrodução ao Pandas\r\n\r\n\r\n\r\nEmentas para referência\r\nEmenta 1\r\nMateriais interessantes\r\nIntrodução à ciência de dados\r\nData Science with R\r\nVisão Geral da Ciência de Dados\r\nIntroduction to Data Science\r\nEstudando RMarkdown e Markdown\r\nO entendimento sobre o RMarkdown e o Markdown será muito importante para desenvolvermos os nossos materiais. Segue uma apresentação preliminar:\r\nRmarkdown\r\nComo usar o GitHub\r\nPara entender como usar o GitHub e nossos projetos R/Python/RStudio, assista a série rapidinahs do R (0005 - 00011).\r\nLinguagens de programação\r\nIremos iniciar a falar sobre as duas principais linguagens que iremos trabalhar, o ambiente R e o Python.\r\nAmbiente R\r\nFamília de pacotes a serem estudados\r\nFamília tidyverse\r\nEstudando o R\r\nTemos um curso em desenvolvimento que vale a pena estudar, seguido por vídeo-aulas, materiais escritos e exercícios. Acesse: http://bendeivide.github.io/cursor.\r\nLinguagem Python\r\nIntrodução ao Python\r\nPor volta dos anos 1980, o holandês Guido Van Rossum, que até então trabalhava no time de desenvolvimento da linguagem ABC no CWI (Centrum Wiskunde & Informatica), o instituto nacional de pesquisa em matemática e ciência da computação da Holanda, se tornaria a principal figura responsável pela criação do Python, uma linguagem de programação com ampla aplicabilidade que atingiu alta popularidade entre desenvolvedores, acadêmicos e empresas (incluindo gigantes como Google, YouTube e Dropbox).\r\nSucintamente, podemos descrever o Python como uma linguagem de programação open source de alto nível, interpretada, interativa e orientada a objetos. Sua aplicação é bastante versátil e inclui desenvolvimento de aplicativos, páginas da web, análise de dados, automatização de rotinas e até mesmo desenvolvimento de jogos.\r\nO Python está disponível para muitos sistemas operacionais, incluindo os populares Linux, Mac OS e Windows. A versão mais recente para seu processador e sistema operacional (SO) pode ser encontrada para download na página oficial do Python.\r\nApós a instalação, você poderá utilizar a linguagem por meio do seu terminal ou prompt de comando, além do IDLE, o ambiente de desenvolvimento integrado (do inglês, Integrated Development Environment, ou IDE) padrão do Python, criado pelo já citado fundador da linguagem, Guido Van Rossum. A utilização de outros IDE’s, além do próprio IDLE, podem tornar a experiência com a linguagem mais didática e/ou dinâmica, porém trata-se uma escolha que fica a critério do estudante/programador. Algumas alternativas de IDE’s para programação Python são o Spyder, o Pycharm e o RStudio.\r\nPrimeiros comandos no Python\r\nCom o Python já disponível na sua máquina, é o momento de inaugurar a experiência com a linguagem. Tipicamente, o código mais básico para iniciar os estudos é retornar “Olá, Mundo!” na tela.\r\nCódigo\r\nPrint('Ola, Mundo!')\r\nOutput\r\nOla, Mundo!\r\nFinalmente, temos nosso primeiro programa no Python! É válido citar que as aspas utilizadas podem ser simples ou duplas.\r\nPara a construção de um código bem estruturado, é importantíssimo adicionar comentários conforme o trabalho avança, garantindo que a leitura do programa fique o mais dinâmica possível, permitindo melhor compreensão e facilitando o ajuste de possíveis erros.\r\nPor padrão, os comentários no Python são inseridos utilizando o símbolo # + 1 espaço + comentário. É recomendável utilizar ao menos 2 espaços entre a última linha de código e um comentário, conforme o exemplo a seguir.\r\nCódigo\r\nvar = 'Ola, Mundo!'  # Exemplo de comentário 1\r\n\r\nPrint(var)  # Exemplo de comentário 2\r\nOutput\r\nOla, Mundo!\r\nCada código trará suas informações no formato que mais se adeque ao seu objetivo, sendo assim, o Python apresenta diferentes tipos de dados possíveis. Para os primeiros passos, os tipos de dados mais utilizados serão os demonstrados abaixo:\r\nstr: Dado no formato texto, ‘string’ representa uma sequência de caracteres\r\nExemplos de strings: “Olá, Mundo!”, “CDEC”, “Python”…\r\nint: Dado numérico no formato inteiro (integer)\r\nExemplos de números de tipo integer: 1, -2, -5, 15…\r\nfloat: Dado numérico no formato “flutuante”, apresentando casas decimais após a parte inteira\r\nExemplos de números de tipo float: 1.20, -13.444, 15.89…\r\nbool: Dado no formato “booleano”, tendo como característica os valores “True” e “False”\r\nOs únicos valores possíveis para uma variável booleana são “True” e “False”\r\nA função type( ) pode nos mostrar o tipo de uma variável, enquanto as funções str( ), int( ), float( ) e bool( ) permite fazer os valores transitarem entre diferentes tipos, como pode ser observado nos exemplos abaixo:\r\nCódigo\r\na = True\r\n\r\nx = 1\r\n\r\ny = -3.50\r\n\r\nz = \"Olá, Mundo!\"\r\n\r\nprint(type(a))\r\n\r\nprint(type(x))\r\n\r\nprint(type(y))\r\n\r\nprint(type(z))\r\n\r\nprint(str(x))\r\n\r\nprint(int(y))\r\nOutput\r\n<class 'bool'>\r\n\r\n<class 'int'>\r\n\r\n<class 'float'>\r\n\r\n<class'str'>\r\n\r\n1\r\n\r\n-3\r\nMódulos Python para Data Science\r\nPython é hoje em dia considerado a linguagem para cientistas de dados, isso se dá pelo fato de ela possuir vários módulos que facilitam a construção do algoritmo além de permitir em alguns casos a utilização de computação em GPU, tornando o processo muito mais rápido. Hoje os principais módulos usados são os seguintes: * Numpy: NumPy é um projeto open source que permite executar computação numérica com Python de forma rápida e fácil, quase todas as ferramentas seguintes, se não todas, usam do poder de computação de arrays e matrizes de Numpy. * Scipy: SciPy é um pacote de módulos Python open source voltados para ciência, matemática e engenharia. Dentro deste pacote são incluídos módulos como NumPy, Matplotlib (usado principalmente para plotagem de gráficos) e Pandas. * Theano: Theano é um módulo Python que te permite definir, otimizar, e avaliar expressões matemáticas envolvendo arrays multi-dimensionais eficientemente. Ele é construído em cima de NumPy. Theano também te permite fazer computações de dados usando a GPU, aumentando a performance em até 140x. * TensorFlow: TensorFlow é um módulo Python open source para machine learning. Ele tem um ecossistema abrangente e flexível de ferramentas, bibliotecas e recursos da comunidade que permite aos pesquisadores levar adiante ML de última geração e aos desenvolvedores criar e implantar aplicativos com tecnologia de ML. * Keras: Keras é uma API desenvolvida para facilitar o desenvolvimento de modelos de machine learning diminuindo o número de ações que o usuário necessita fazer para casos comuns, além de mostrar mensagens de erro claras e que permitem encontrar a causa de forma mais fácil. Keras também possui uma documentação extensa e guias para o desenvolvedor. Hoje em dia é considerado uma das 5 melhores para deep learning. * PyTorch: Assim como TensorFlow, PyTorch é um módulo Python open source para machine learning. Ele é baseado na biblioteca Torch que também está disponível para C++. * Pandas: Pandas é uma ferramenta open source essencial para análise de dados em Python. Ele é rápido, flexível e fácil de usar. Com ele é possível fazer a criação e manipulação de Data Frames, além de poder fazer um resumo estatístico do Data Frame com um único comando. ### Introdução ao Numpy Primeiramente, antes de usar o módulo numpy, é necessário que ele esteja instalado no computador ou virtual environment de desenvolvimento. Para isso, assim como quase todos os módulos para Python, podemos fazer essa instalação utilizando o pip ou conda.\r\npip install numpy ou conda install numpy\r\nAgora com o módulo instalado podemos utilizá-lo em código. Para isso precisamos primeiro importar esse módulo da seguinte forma:\r\nimport numpy as np\r\nEssa é a forma que o módulo numpy é normalmente importado. Esse código nos permite escrever apenas np quando formos utilizar alguma função Numpy, esse mesmo formato será visto posteriormente.\r\nNumpy contem arrays multidimensionais e matrizes como estrutura de dados. Ele disponibiliza um tipo de dado chamado ndarray que como o nome sugere, é um array multidimensional. Esse tipo de dado contém vários métodos para fazer operações sobre ele de forma eficiente e facilmente, a maioria das vezes mais rápido que listas nativas do Python. ndarray juntamente com Numpy, adicionam estruturas de dados cálculos eficientes com arrays e matrizes e ainda disponibilizam uma grande gama de funções matemáticas de alto nível que operam nesses arrays e matrizes.\r\nPara criar um ndarray inicializado com todos os indices como 0 ou 1 basta seguir o código abaixo:\r\n>>> import numpy as np\r\n>>> # Inicializa um ndarray com 10 elementos todos com o valor 0\r\n>>> a = np.zeros(10)\r\n>>> # Inicializa um ndarray com 10 elementos todos com o valor 1\r\n>>> b = np.ones(10)\r\nPara criar um ndarray usando uma lista Python é necessário fazer o seguinte:\r\n>>> c = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\r\n>>> d = np.array(c)  # Também é possível utilizar a lista diretamente como parâmetro\r\nOs cálculos básicos como soma, subtração, multiplicação e divisão são tão simples quanto as operações de variáveis numéricas:\r\n>>> e = b + d\r\n>>> e\r\narray([ 2.,  3.,  4.,  5.,  6.,  7.,  8.,  9., 10., 11.])\r\n>>> e = b - d\r\n>>> e\r\narray([ 0., -1., -2., -3., -4., -5., -6., -7., -8., -9.])\r\n>>> f = e * d\r\n>>> f\r\narray([  0.,  -2.,  -6., -12., -20., -30., -42., -56., -72., -90.])\r\n>>> f = e / d\r\n>>> f\r\narray([ 0.        , -0.5       , -0.66666667, -0.75      , -0.8       ,\r\n       -0.83333333, -0.85714286, -0.875     , -0.88888889, -0.9       ])\r\nPara criar ndarrays multidimensionais existem algumas formas, como usar uma lista Python multidemensional ou simplesmente iniciar um ndarray com valores aleatórios. Esses não são os únicos métodos para realizar essa tarefa, mas já é um bom começo para se habituar ao Numpy.\r\n>>> # Utilizando Python list\r\n>>> g = [[1, 2, 3], [4, 5, 6]]\r\n>>> h = np.array(g)\r\n>>> h\r\narray([[1, 2, 3],\r\n       [4, 5, 6]])\r\n>>> # Inicializando com método empty.\r\n>>> h = np.empty((2, 2))\r\n>>> h\r\narray([[1.5711153e-316, 0.0000000e+000],\r\n       [0.0000000e+000, 0.0000000e+000]])\r\nAs mesmas regras de operações entre matrizes também são aplicadas aos ndarrays, ou seja, se tivermos uma matriz 2x2 e tentarmos multiplicar por um vetor de tamanho 3 teremos um erro no código e o programa irá levantar uma exceção.\r\n>>> h = np.empty((2, 2))\r\n>>> a = np.random.rand(2)  # Inicializa um vetor de tamanho 2 com números aleatórios\r\n>>> a\r\narray([0.22500409, 0.32657332])\r\n>>> a * h  # Operação com sucesso\r\narray([[3.535074e-317, 0.000000e+000],\r\n       [0.000000e+000, 0.000000e+000]])\r\n>>> a = np.random.rand(3)  # Vetor agora com 3 números aleatórios\r\n>>> a * h  # Essa operação gera erro\r\nTraceback (most recent call last):\r\n  File \"/usr/lib/python3.8/code.py\", line 90, in runcode\r\n    exec(code, self.locals)\r\n  File \"<input>\", line 1, in <module>\r\nValueError: operands could not be broadcast together with shapes (3,) (2,2) \r\nComo podemos ver pelo erro, a operação não foi sucedida pelo fato de não terem formatos compatíveis.\r\nAgora que sabemos como inicializar ndarrays e fazer operações com eles, ainda precisamos saber como acessar os valores dentro destes ndarrays. Para isso, utilizamos uma sintaxe muito parecida com a nativa do Python.\r\nimport numpy as np\r\n\r\n>>> a = np.arange(10)  # Inicia um ndarray de 0 a 9\r\n>>> a\r\narray([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\r\n>>> # Acessando um único valor\r\n>>> a[2]\r\n2\r\n>>> # Acessando o último valor\r\n>>> a[-1]\r\n9\r\n>>> # Criando um slice, ou corte, do ndarray de 0 a 2\r\n>>> a[:3]\r\narray([0, 1, 2])\r\n>>> # Criando um slice, ou corte, do ndarray de 3 a 9\r\n>>> a[3:]\r\narray([3, 4, 5, 6, 7, 8, 9])\r\n>>> # Criando um slice, ou corte de 3 a 6\r\n>>> a[3:7]\r\narray([3, 4, 5, 6])\r\n>>> # Acessando um único valor em uma matriz\r\n>>> b = np.array([[1, 2, 3], [4, 5, 6]])\r\n>>> b[1][0]\r\n4\r\nO mesmo que foi feito com o vetor pode ser feito para conseguir slices das matrizes, com a diferença que é possível utilizar a notação de slice em todos os campos de índice.\r\nPara obter mais informações, visite o site da documentação do Numpy.\r\nIntrodução ao Pandas\r\nAssim como Numpy, Pandas também necessita ser instalado antes de ser usado. Para isso, podemos usar tanto pip quanto conda:\r\npip install pandas ou conda install pandas\r\nApós instalado, Pandas agora pode ser importado para ser utilizado no seu script assim como vimos anteriormente com o Numpy\r\nimport pandas as pd\r\nAssim quando formos usar as funções, classes e métodos do Pandas nós precisamos escrever apenas pd.\r\nExistem várias formas de criar um DataFrame usando Pandas. Aqui veremos dois métodos básicos, um criado a partir de um dicionário Python e outro importando de um CSV.\r\n>>> # Criando DataFrame com dicionários Python.\r\n>>> import pandas as pd\r\n>>>\r\n>>> # Cria um dicionário com as chaves iguais ao nome das colunas e com os valores\r\n>>> # iguais a listas de valores.\r\n>>> dict_data = {\"a\": [1, 2, 3],\r\n...              \"b\": [4, 5, 6],\r\n...              \"c\": [7, 8, 9]}\r\n>>> # (Opcional) Cria uma lista de nomes para os índices.\r\n>>> index = [\"experimento 1\", \"experimento 2\", \"experimento 3\"]\r\n>>> # Cria o DataFrame passando o dicionário como primeiro parâmetro e a lista\r\n>>> # de índices como segundo parâmetro\r\n>>> dict_data_frame = pd.DataFrame(dict_data, index=index)\r\n>>> dict_data_frame\r\n               a  b  c\r\nexperimento 1  1  4  7\r\nexperimento 2  2  5  8\r\nexperimento 3  3  6  9\r\nAqui criamos um DataFrame usando dicionários Python. O parâmetro de índice é opcional, caso ele não seja colocado, no lugar dos nomes escolhidos serão adicionados valores incrementais, ou seja, 1, 2, 3, … n, em que n é o número de linhas no seu DataFrame.\r\nAgora veremos como importar um CSV como DataFrame usando Pandas\r\n>>> # Criando um DataFrame importando um CSV.\r\n>>> import pandas as pd\r\n>>>\r\n>>> # Utilizamos a função read_csv(local do arquivo, separador, index_col=índice ou nome da coluna)\r\n>>> csv_data_frame = pd.read_csv('./recursos/introducao pandas/csvData.csv', \";\", index_col=0)\r\n>>> csv_data_frame\r\n               a  b  c\r\nExperimento 1  1  4  7\r\nExperimento 2  2  5  8\r\nExperimento 3  3  6  9\r\nAqui podemos ver como é simples importar um CSV como DataFrame usando o Pandas. O arquivo utilizado para este teste pode ser encontrado no nosso GIT na pasta recursos, introducao pandas.\r\n\r\n\r\n\r\n",
      "last_modified": "2021-05-03T21:02:11-03:00"
    },
    {
      "path": "index.html",
      "title": "CDEC",
      "description": "**CDEC** - Ciência dos Dados: Estatística e Computação\n",
      "author": [],
      "contents": "\r\n\r\n\r\n{\"x\":{\"data\":null,\"type\":\"NULL\",\"container\":\"svg\",\"options\":null,\"script\":\"var d3Script = function(d3, r2d3, data, svg, width, height, options, theme, console) {\\nthis.d3 = d3;\\n\\nsvg = d3.select(svg.node());\\n/* R2D3 Source File:  d3/voronoi/voronoi.js */\\n// !preview r2d3 d3_version = 4\\n\\n// Based on: https://bl.ocks.org/mbostock/4060366\\n// Based on: r2d3 package in gallery\\n\\nsvg.on(\\\"touchmove mousemove\\\", moved);\\n\\nvar sites = d3.range(100)\\n    .map(function(d) { return [Math.random() * width, Math.random() * height]; });\\n\\nvar voronoi = d3.voronoi()\\n    .extent([[-8, -8], [width + 8, height + 8]]);\\n\\nvar polygon = svg.append(\\\"g\\\")\\n    .attr(\\\"class\\\", \\\"polygons\\\")\\n  .selectAll(\\\"path\\\")\\n  .data(voronoi.polygons(sites))\\n  .enter().append(\\\"path\\\")\\n    .call(redrawPolygon);\\n\\nvar link = svg.append(\\\"g\\\")\\n    .attr(\\\"class\\\", \\\"links\\\")\\n  .selectAll(\\\"line\\\")\\n  .data(voronoi.links(sites))\\n  .enter().append(\\\"line\\\")\\n    .call(redrawLink);\\n\\nvar site = svg.append(\\\"g\\\")\\n    .attr(\\\"class\\\", \\\"sites\\\")\\n  .selectAll(\\\"circle\\\")\\n  .data(sites)\\n  .enter().append(\\\"circle\\\")\\n    .attr(\\\"r\\\", 2.5)\\n    .call(redrawSite);\\n\\nfunction moved() {\\n  sites[0] = d3.mouse(this);\\n  redraw();\\n}\\n\\nfunction redraw() {\\n  var diagram = voronoi(sites);\\n  polygon = polygon.data(diagram.polygons()).call(redrawPolygon);\\n  link = link.data(diagram.links()), link.exit().remove();\\n  link = link.enter().append(\\\"line\\\").merge(link).call(redrawLink);\\n  site = site.data(sites).call(redrawSite);\\n}\\n\\nfunction redrawPolygon(polygon) {\\n  polygon\\n      .attr(\\\"d\\\", function(d) { return d ? \\\"M\\\" + d.join(\\\"L\\\") + \\\"Z\\\" : null; });\\n}\\n\\nfunction redrawLink(link) {\\n  link\\n      .attr(\\\"x1\\\", function(d) { return d.source[0]; })\\n      .attr(\\\"y1\\\", function(d) { return d.source[1]; })\\n      .attr(\\\"x2\\\", function(d) { return d.target[0]; })\\n      .attr(\\\"y2\\\", function(d) { return d.target[1]; });\\n}\\n\\nfunction redrawSite(site) {\\n  site\\n      .attr(\\\"cx\\\", function(d) { return d[0]; })\\n      .attr(\\\"cy\\\", function(d) { return d[1]; });\\n}\\n};\",\"style\":\"/* R2D3 Source File:  d3/voronoi/voronoi.css */\\n.links {\\n  stroke: #000;\\n  stroke-opacity: 0.2;\\n}\\n\\n.polygons {\\n  fill: none;\\n  stroke: #000;\\n}\\n\\n.polygons :first-child {\\n  fill: #f00;\\n}\\n\\n.sites {\\n  fill: #000;\\n  stroke: #fff;\\n}\\n\\n.sites :first-child {\\n  fill: #fff;\\n}\",\"version\":4,\"theme\":{\"default\":{\"background\":\"#FFFFFF\",\"foreground\":\"#000000\"},\"runtime\":null},\"useShadow\":true},\"evals\":[],\"jsHooks\":[]}\r\n Objetivo \r\n\r\n\r\nO Projeto tem o objetivo de ensinar, trocar experiências, acessorar, temas relevantes à Ciência de dados, que nada mais é do que o estudo da Estatística e a Computação. A experiência será extraordinária, e esperamos que todos no grupo apreciem, divulguem e zele por esse projeto, pois acima de tudo o que falamos, propagaremos conhecimento, uma liberdade necessária.\r\n\r\n\r\n\r\n",
      "last_modified": "2021-05-03T20:47:21-03:00"
    },
    {
      "path": "README.html",
      "author": [],
      "contents": "\r\n\r\nContents\r\ndatascience\r\nIntegrantes\r\nEmentas para referência\r\nMateriais interessantes\r\nFamília de pacotes a serem estudados\r\nPacotes R\r\n\r\n\r\nLinguagens de programação\r\nLinguagem R\r\nLinguagem Python\r\nIntrodução ao Python\r\nMódulos Python para Data Science\r\n\r\n\r\nEstudando RMarkdown e Markdown\r\n\r\ndatascience\r\nEstudando ciência dos dados\r\nIntegrantes\r\nBen Dêivide (DEFIM/UFSJ)\r\nGessyca Moreira (Eng. Telecom./UFSJ)\r\nLucas Rebouças (Eng. Civil/UFSJ)\r\nMatheus Fernando (Eng. Mec/UFSJ)\r\nEmentas para referência\r\nEmenta 1\r\nMateriais interessantes\r\nIntrodução à ciência de dados\r\nData Science with R\r\nVisão Geral da Ciência de Dados\r\nFamília de pacotes a serem estudados\r\nPacotes R\r\nFamília tidyverse\r\nLinguagens de programação\r\nLinguagem R\r\nLinguagem Python\r\nIntrodução ao Python\r\nPor volta dos anos 1980, o holandês Guido Van Rossum, que até então trabalhava no time de desenvolvimento da linguagem ABC no CWI (Centrum Wiskunde & Informatica), o instituto nacional de pesquisa em matemática e ciência da computação da Holanda, se tornaria a principal figura responsável pela criação do Python, uma linguagem de programação com ampla aplicabilidade que atingiu alta popularidade entre desenvolvedores, acadêmicos e empresas (incluindo gigantes como Google, YouTube e Dropbox).\r\nSucintamente, podemos descrever o Python como uma linguagem de programação open source de alto nível, interpretada, interativa e orientada a objetos. Sua aplicação é bastante versátil e inclui desenvolvimento de aplicativos, páginas da web, análise de dados, automatização de rotinas e até mesmo desenvolvimento de jogos.\r\nO Python está disponível para muitos sistemas operacionais, incluindo os populares Linux, Mac OS e Windows. A versão mais recente para seu processador e sistema operacional (SO) pode ser encontrada para download na página oficial do Python. O blog Real Python apresenta mais alternativas de instalação (além do download no site oficial) da linguagem nos SO’s mais populares.\r\nApós a instalação, você poderá utilizar o Python por meio do seu terminal ou prompt de comando, além do IDLE, o ambiente de desenvolvimento integrado (do inglês, Integrated Development Environment, ou IDE) padrão do Pyhton, criado pelo já citado fundador da linguagem, Guido Van Rossum. A utilização de outras IDE’s, além do próprio IDLE, podem tornar a experiência com a linguagem mais didática e/ou dinâmica, porém trata-se uma escolha que fica a critério do estudante/programador. Algumas alternativas de IDE’s para programação Python são o Spyder, o Pycharm e o RStudio.\r\nMódulos Python para Data Science\r\nPython é hoje em dia considerado a linguagem para cientistas de dados, isso se dá pelo fato de ela possuir vários módulos que facilitam a construção do algoritmo além de permitir em alguns casos a utilização de computação em GPU, tornando o processo muito mais rápido. Hoje os principais módulos usados são os seguintes: * Numpy: NumPy é um projeto open source que permite executar computação numérica com Python de forma rápida e fácil, quase todas as ferramentas seguintes, se não todas, usam do poder de computação de arrays e matrizes de Numpy. * Scipy: SciPy é um pacote de módulos Python open source voltados para ciência, matemática e engenharia. Dentro deste pacote são incluídos módulos como NumPy, Matplotlib (usado principalmente para plotagem de gráficos) e Pandas. * Theano: Theano é um módulo Python que te permite definir, otimizar, e avaliar expressões matemáticas envolvendo arrays multi-dimensionais eficientemente. Ele é construído em cima de NumPy. Theano também te permite fazer computações de dados usando a GPU, aumentando a performance em até 140x. * TensorFlow: TensorFlow é um módulo Python open source para machine learning. Ele tem um ecossistema abrangente e flexível de ferramentas, bibliotecas e recursos da comunidade que permite aos pesquisadores levar adiante ML de última geração e aos desenvolvedores criar e implantar aplicativos com tecnologia de ML. * Keras: Keras é uma API desenvolvida para facilitar o desenvolvimento de modelos de machine learning diminuindo o número de ações que o usuário necessita fazer para casos comuns, além de mostrar mensagens de erro claras e que permitem encontrar a causa de forma mais fácil. Keras também possui uma documentação extensa e guias para o desenvolvedor. Hoje em dia é considerado uma das 5 melhores para deep learning. * PyTorch: Assim como TensorFlow, PyTorch é um módulo Python open source para machine learning. Ele é baseado na biblioteca Torch que também está disponível para C++. * Pandas: Pandas é uma ferramenta open source essencial para análise de dados em Python. Ele é rápido, flexível e fácil de usar. Com ele é possível fazer a criação e manipulação de Data Frames, além de poder fazer um resumo estatístico do Data Frame com um único comando.\r\nEstudando RMarkdown e Markdown\r\n\r\n\r\n",
      "last_modified": "2021-05-03T21:02:11-03:00"
    }
  ],
  "collections": []
}
